fst.CI<-list()
for(j in 1:length(ci)){
ci.min<-(ci[j]/2)
ci.max<-1-(ci[j]/2)
fstCI<-lapply(bin.fst, function(x){
keep.fst<-x[round(length(x)*ci.min):round(length(x)*ci.max)]
if(length(keep.fst)>0){
fst.thresh<-c(min(keep.fst),max(keep.fst))
names(fst.thresh)<-c("Low","Upp")
} else{
fst.thresh<-c("","")
names(fst.thresh)<-c("Low","Upp")
}
return(fst.thresh)
})
ci.name<-paste("CI",(1-ci[j]),sep="")
cis<-data.frame(do.call(rbind,fstCI))
cis$UppHet<-as.numeric(rownames(cis))
cis<-apply(cis,c(1,2),round,3)
bins<-apply(bins,c(1,2),round,3)
cis<-merge(cis,bins,by.x="UppHet",by.y="upp.breaks",keep=T)
fst.CI[[j]]<-data.frame(Low=cis$Low,Upp=cis$Upp,LowHet=cis$low.breaks,UppHet=cis$UppHet)
names(fst.CI)[j]<-ci.name
}
return(fst.CI)
}
fst.boot<-function(df, fst.choice="fst", ci=0.05,num.breaks=25,bootstrap=TRUE){
#updated 2 Dec 2016
#Fst options are Wright, WeirCockerham, or WeirCockerhamCorrected
fst.options<-c("FST","Fst","fst","var","VAR","Var","theta","Theta","THETA",
"Betahat","BETAHAT","betahat")
if(!(fst.choice %in% fst.options)) { stop("Fst choice not an option. Use fst.options.print() to see options.")}
nloci<-(ncol(df)-2)
if(bootstrap == TRUE)
{
boot.out<-as.data.frame(t(replicate(nloci, fst.boot.onecol(df,fst.choice))))
colnames(boot.out)<-c("Ht","Fst")
boot.out$Fst[boot.out$Fst=="NaN"]<-0
print("Bootstrapping done. Now Calculating CIs")
} else{
boot.out<-calc.actual.fst(df,fst.choice)
rownames(boot.out)<-boot.out$Locus
boot.out<-data.frame(cbind(as.numeric(boot.out$Ht),as.numeric(boot.out$Fst)))
colnames(boot.out)<-c("Ht","Fst")
boot.out$Fst[boot.out$Fst=="NaN"]<-0
print("Fsts calculated. Now Calculating CIs")
}
#order by het
boot.out<-as.data.frame(boot.out[order(boot.out$Ht),])
#create overlapping bins
bins<-make.bins(boot.out,num.breaks)
#find quantile
fst.CI<-find.quantiles(bins$bins,bins$bin.fst,ci)
return(list(Fsts=boot.out,Bins=bins$bins,fst.CI))
}
fst.boot.means<-function(boot.out){ #boot.out[[1]]
#updated 2 Dec 2016
all.boot<-data.frame(
Ht=unlist(lapply(boot.out$Fsts,
function(x) { out<-x$Ht; return(out) })),
Fst=unlist(lapply(boot.out$Fsts,
function(x) { out<-x$Fst; return(out) })))
breaks<-boot.out$Bins[[1]]
bmu<-t(apply(breaks,1,function(x){
x.ht<-all.boot[all.boot$Ht >= x[1] &
all.boot$Ht <= x[2],"Ht"]
x.fst<-all.boot[all.boot$Ht >= x[1] &
all.boot$Ht <= x[2],"Fst"]
x.fh<-c(mean(x.ht),mean(x.fst),length(x.ht))
return(x.fh)
}))
bmu<-data.frame(bmu[,1],bmu[,2],bmu[,3],breaks[,1],breaks[,2])
colnames(bmu)<-c("Ht","Fst","Num","LowBin","UppBin")
return(bmu)
}
p.boot<-function(actual.fsts, boot.out=NULL,boot.means=NULL){
#updated 2 Dec 2016
if(is.null(boot.out) & is.null(boot.means)) {
stop("You must provide either bootstrapping output or bootstrap means") }
if(class(boot.out[[2]])=="data.frame"){
stop("Can only calculate p-values if bootstrapping was run more than once.") }
if(is.null(boot.means)){ #then we need to calculate means
boot.means<-fst.boot.means(boot.out)
}#boot.means
boot.means$real.means<-apply(boot.means,1,function(x){
rmu<-mean(as.numeric(actual.fsts[
as.numeric(actual.fsts$Ht) >= as.numeric(x[4]) &
as.numeric(actual.fsts$Ht) <= as.numeric(x[5]),"Fst"]),na.rm=T)
return(rmu)
})
boot.means$unitsaway<-abs(boot.means$real.means - boot.means$Fst)
boot.means$low<-boot.means$Fst-boot.means$unitsaway
boot.means$upp<-boot.means$Fst+boot.means$unitsaway
pvals<-unlist(apply(actual.fsts,1, function(x){
bin<-boot.means[
as.numeric(boot.means$LowBin) <= as.numeric(x["Ht"])
& as.numeric(boot.means$UppBin) >= as.numeric(x["Ht"]),]
fsts.in.bin<-apply(bin,1,function(y){
actual.fsts[actual.fsts$Ht >= as.numeric(y["LowBin"] )
& actual.fsts$Ht <= as.numeric(y["UppBin"]),]
})
unitsaway<-apply(bin,1,function(y){
abs(as.numeric(x["Fst"]) - as.numeric(y["Fst"])) })
low<-apply(bin,1,function(y){
as.numeric(y["Fst"]) - as.numeric(unitsaway)  })
upp<-apply(bin,1,function(y){
as.numeric(y["Fst"]) + as.numeric(unitsaway)  })
n<-lapply(fsts.in.bin, nrow)
p<-NULL
if(length(fsts.in.bin)>0){
for(i in 1:length(fsts.in.bin)){
p[i]<-(nrow(fsts.in.bin[[i]][as.numeric(fsts.in.bin[[i]]$Fst) <
as.numeric(low[i]),]) +
nrow(fsts.in.bin[[i]][as.numeric(fsts.in.bin[[i]]$Fst) >
as.numeric(upp[i]),]))/as.numeric(n[i])
}
p<-max(p)	#Some of these loci are in multiple bins.
}else{
p<-NA
print("No bins found. Were actual.fsts and boot.out/boot.means calculated with the same Fst method?")
}
return(p)
}))
names(pvals)<-actual.fsts$Locus
return(pvals)
}
ci.means<-function(boot.out.list){ #boot.out[[3]]
#updated 2 Dec 2016
if(class(boot.out.list)=="list" & length(boot.out.list) > 1) {
boot.ci<-as.data.frame(do.call(rbind,
lapply(boot.out.list,function(x){
y<-as.data.frame(x[[1]])
return(y)
})))
} else {
boot.ci<-as.data.frame(boot.out.list[[1]])
}
colnames(boot.ci)<-c("Low","Upp","LowHet","UppHet")
avg.cil<-tapply(boot.ci[,1],boot.ci$UppHet,mean)
avg.ciu<-tapply(boot.ci[,2],boot.ci$UppHet,mean)
low.het<-tapply(boot.ci$LowHet,boot.ci$UppHet,mean)
return(data.frame(low=avg.cil,upp=avg.ciu, LowHet=low.het,
UppHet=as.numeric(levels(as.factor(boot.ci$UppHet)))))
}
plotting.cis<-function(df,boot.out=NULL,ci.df=NULL,sig.list=NULL,Ht.name="Ht",Fst.name="Fst",
ci.col="red", pt.pch=1,file.name=NULL,sig.col=ci.col,make.file=TRUE) {
#This function takes a dataframe with empirical Fst and Ht measurements
#It must have at least two columns, one named "Ht" and one named "Fst"
#Or you must pass the column names to the function
#You must give it bootstrap output or a list of confidence interval values.
#updated 5 Dec 2016
if(is.null(boot.out) & is.null(ci.df)){
stop("Must provide bootstrap output or a list of CI values")
} else if(is.null(ci.df)){
avg.ci<-ci.means(boot.out[[3]])
} else {
avg.ci<-ci.df
}
#if(smooth.ci==TRUE){
# avg.ci<-smooth.cis(avg.ci,smoothing.rate)
#}
#if(names(avg.ci[[1]])[1] != "0"){ #need to extend the CIs to 0
#	avg.ci[[1]]<-c(0,avg.ci[[1]])
#	avg.ci[[2]]<-c(0,avg.ci[[2]])
#	names(avg.ci[[1]])[1]<-0
#	names(avg.ci[[2]])[1]<-0
#}
if(make.file==TRUE){
if(!is.null(file.name)) {
png(file.name,height=8,width=9,units="in",res=300) }
else {
png("OutlierLoci.png",height=8,width=9,units="in",res=300) }
}
x.max<-round(as.numeric(max(df[,Ht.name]))+0.1,1)
plot(df[,Ht.name],df[,Fst.name],xlab="",ylab="",las=1,pch=pt.pch,axes=F,
xlim=c(0,x.max))
axis(1,pos=0,at=seq(0,x.max,0.1))
axis(2,pos=0,las=1)
mtext(expression(italic(F)["ST"]),2,line=2.5)
mtext(expression(italic(H)["T"]),1,line=2.5)
if(!is.null(sig.list)){
points(df[df[,1] %in% sig.list,Ht.name],df[df[,1] %in% sig.list,Fst.name],col=sig.col,pch=pt.pch)
}
points(avg.ci$LowHet,avg.ci$low,type="l",col=ci.col)
points(avg.ci$UppHet,avg.ci$upp,type="l",col=ci.col)
if(make.file==TRUE) dev.off()
}
find.outliers<-function(df,boot.out,ci.df=NULL,file.name=NULL){
#Updated 12 Dec 2016
#Need to give this function bootstrap output (or a list of CIs)
if(is.null(boot.out) & is.null(ci.df)){
stop("Must provide bootstrap output or a list of CI values")
} else if(is.null(ci.df)){ #need to calculate the mean ci values
ci.df<-ci.means(boot.out[[3]])
}
if(class(boot.out[[2]])=="list"){
bin<-boot.out[[2]][[1]] }
if(class(boot.out[[2]])=="data.frame"){
bin<-boot.out[[2]] }
#match Fst and Ht
#I want to find the outliers.
#For each df, find its closest cis
actual.bin<-apply(ci.df, 1, function(x){ #this returns a list of Fst vectors
out<-df[df$Ht >= x["LowHet"] &	df$Ht < x["UppHet"],] })
out<-NULL
for(i in 1:nrow(ci.df)){
out<-rbind(out,actual.bin[[i]][
as.numeric(actual.bin[[i]]$Fst) < as.numeric(ci.df[i,"low"]) |
as.numeric(actual.bin[[i]]$Fst)> as.numeric(ci.df[i,"upp"]),])
}
out<-out[!duplicated(out$Locus),]
#	outliers<-NULL
#	for(i in 1: nrow(df)){
#		x<-df[i,]
#		#get the closest ones to the ht
#		this.ci<-ci.df[which.min(abs(as.numeric(ci.df$Ht)-as.numeric(x["Ht"]))),]
#		if(x["Fst"] > this.ci$upp | x["Fst"] < this.ci$low){
#			outliers<-rbind(outliers,x) }
#	}
if(!is.null(file.name)){
write.csv(out,paste(file.name,".csv",sep=""))
}
return(out)
}
calc.actual.fst<-function(df, fst.choice="fst"){
fst.options<-c("FST","Fst","fst","var","VAR","Var","theta","Theta","THETA",
"Betahat","BETAHAT","betahat")
if(!(fst.choice %in% fst.options)) { stop("Fst choice not an option. Use fst.options.print() to see options.")}
fsts<-data.frame(Locus=character(),Ht=numeric(),Fst=numeric(),
stringsAsFactors=F)
if(fst.choice %in% c("Fst","FST","fst")){
for(i in 3:ncol(df)){
fsts[i-2,]<-c(colnames(df)[i],calc.fst(df,i))
}
}
if(fst.choice %in% c("VAR","var","Var")){
for(i in 3:ncol(df)){
fsts[i-2,]<-c(colnames(df)[i],var.fst(df,i))
}
}
if(fst.choice %in% c("Theta","theta","THETA")){
for(i in 3:ncol(df)){
fsts[i-2,]<-c(colnames(df)[i],calc.theta(df,i))
}
}
if(fst.choice %in% c("betahat","BETAHAT","Betahat")){
for(i in 3:ncol(df)){
fsts[i-2,]<-c(colnames(df)[i],calc.betahat(df,i))
}
}
fsts<-data.frame(Locus=as.character(fsts$Locus),Ht=as.numeric(fsts$Ht),Fst=as.numeric(fsts$Fst),
stringsAsFactors=F)
return(fsts)
}
fhetboot<-function(gpop, fst.choice="fst",alpha=0.05,nreps=10){
fsts<-calc.actual.fst(gpop,fst.choice)
boot.out<-as.data.frame(t(replicate(nreps, fst.boot(gpop,fst.choice))))
boot.pvals<-p.boot(fsts,boot.out=boot.out)
boot.cor.pvals<-p.adjust(boot.pvals,method="BH")
boot.sig<-boot.cor.pvals[boot.cor.pvals <= alpha]
plotting.cis(fsts,boot.out,make.file=F,sig.list=names(boot.sig),pt.pch = 19)
outliers<-find.outliers(fsts,boot.out)
fsts$P.value<-boot.pvals
fsts$Corr.P.value<-boot.cor.pvals
fsts$Outlier<-FALSE
fsts[fsts$Locus %in% outliers$Locus,"Outlier"]<-TRUE
return(fsts)
}
fsthet<-function(gpop, fst.choice="fst",alpha=0.05){
fsts<-calc.actual.fst(gpop,fst.choice)
quant.out<-as.data.frame(t(replicate(1, fst.boot(gpop,fst.choice=fst.choice,ci=alpha,bootstrap=FALSE))))
plotting.cis(fsts,quant.out,make.file=F,pt.pch = 19)
outliers<-find.outliers(fsts,quant.out)
fsts$Outlier<-FALSE
fsts[fsts$Locus %in% outliers$Locus,"Outlier"]<-TRUE
return(fsts)
}
gpop<-data.frame(popinfo=c(rep("POP 1", 20),rep("POP 2", 20)),ind.names=c(1:20,1:20),
loc0=c(sample(c("0101","0102"),20,replace=TRUE),sample(c("0101","0102"),20,replace=TRUE)),
loc1=sample(c("0101","0102","0202"),20,replace=TRUE),sample(c("0102","0202"),20,replace=TRUE),
loc2=sample(c("0101","0102","0202"),20,replace=TRUE),sample(c("0101","0102","0202"),20,replace=TRUE),
loc3=sample(c("0101","0102","0202"),40,replace=TRUE),
loc4=sample(c("0101","0102","0202"),40,replace=TRUE))
quant.out<-fst.boot(gpop, bootstrap = FALSE,num.breaks=10)
quant.list<-ci.means(quant.out[[3]])
quant.out
gpop<-data.frame(popinfo=c(rep("POP 1", 20),rep("POP 2", 20)),ind.names=c(1:20,1:20),
loc0=c(sample(c("0101","0102"),20,replace=TRUE),sample(c("0101","0102"),20,replace=TRUE)),
loc1=sample(c("0101","0102","0202"),20,replace=TRUE),sample(c("0102","0202"),20,replace=TRUE),
loc2=sample(c("0101","0102","0202"),20,replace=TRUE),sample(c("0101","0102","0202"),20,replace=TRUE),
loc3=sample(c("0102"),40,replace=TRUE),
loc4=sample(c("0101","0202"),40,replace=TRUE))
quant.out<-fst.boot(gpop, bootstrap = FALSE,num.breaks=10)
quant.list<-ci.means(quant.out[[3]])
quant.out
gpop<-data.frame(popinfo=c(rep("POP 1", 20),rep("POP 2", 20)),ind.names=c(1:20,1:20),
loc0=c(sample(c("0101","0102"),20,replace=TRUE),sample(c("0101","0102"),20,replace=TRUE)),
loc1=sample(c("0101","0102","0202"),20,replace=TRUE),sample(c("0102","0202"),20,replace=TRUE),
loc2=sample(c("0101","0102","0202"),20,replace=TRUE),sample(c("0101","0102","0202"),20,replace=TRUE),
loc3=sample(c("0102"),20,replace=TRUE),sample(c("0101","0202"),20,replace=TRUE),
loc4=sample(c("0101","0202"),20,replace=TRUE),sample(c("0102"),20,replace=TRUE))
quant.out<-fst.boot(gpop, bootstrap = FALSE,num.breaks=10)
quant.list<-ci.means(quant.out[[3]])
quant.out
gpop<-data.frame(popinfo=c(rep("POP 1", 20),rep("POP 2", 20)),ind.names=c(1:20,1:20),
loc0=c(sample(c("0101","0102"),20,replace=TRUE),sample(c("0101","0102"),20,replace=TRUE)),
loc1=sample(c("0101","0102","0202"),20,replace=TRUE),sample(c("0102","0202"),20,replace=TRUE),
loc2=sample(c("0101","0102","0202"),20,replace=TRUE),sample(c("0101","0202"),20,replace=TRUE),
loc3=sample(c("0102"),20,replace=TRUE),sample(c("0101","0202"),20,replace=TRUE),
loc4=sample(c("0101","0202"),20,replace=TRUE),sample(c("0102"),20,replace=TRUE))
quant.out<-fst.boot(gpop, bootstrap = FALSE,num.breaks=10)
quant.out
gpop<-data.frame(popinfo=c(rep("POP 1", 20),rep("POP 2", 20)),ind.names=c(1:20,1:20),
loc0=sample(c("0101","0102","0202"),40,replace=TRUE))
fsts<-calc.actual.fst(gpop)
fst
fsts
gpop<-data.frame(popinfo=c(rep("POP 1", 20),rep("POP 2", 20)),ind.names=c(1:20,1:20),
loc0=c(sample(c("0101","0102"),20,replace=TRUE),sample(c("0101","0102"),20,replace=TRUE)),
loc1=sample(c("0101","0102","0202"),20,replace=TRUE),sample(c("0102","0202"),20,replace=TRUE),
loc2=sample(c("0101","0102","0202"),20,replace=TRUE),sample(c("0101","0202"),20,replace=TRUE),
loc3=sample(c("0102"),20,replace=TRUE),sample(c("0101","0202"),20,replace=TRUE),
loc4=sample(c("0101","0202"),20,replace=TRUE),sample(c("0102"),20,replace=TRUE),
loc5=sample(c("0101","0102","0202"),40,replace=TRUE))
quant.out<-fst.boot(gpop, bootstrap = FALSE,num.breaks=10)
quant.out
gpop<-data.frame(popinfo=c(rep("POP 1", 20),rep("POP 2", 20)),ind.names=c(1:20,1:20),
loc0=sample(c("0101","0102","0202"),40,replace=TRUE))
out.dat<-fhetboot(gpop, fst.choice="fst", alpha=0.05,nreps=1)
gpop<-data.frame(popinfo=c(rep("POP 1", 20),rep("POP 2", 20)),ind.names=c(1:20,1:20),
loc0=sample(c("0101","0102","0202"),40,replace=TRUE),
loc1=sample(c("0101","0102","0202"),40,replace=TRUE),
loc2=sample(c("0101","0102","0202"),40,replace=TRUE))
out.dat<-fhetboot(gpop, fst.choice="fst", alpha=0.05,nreps=10)
fsts<-calc.actual.fst(gpop)
boot.out<-as.data.frame(t(replicate(1, fst.boot(gpop, num.breaks=20))))
boot.pvals<-p.boot(fsts,boot.out=boot.out)
boot.pvals
gpop<-data.frame(popinfo=c(rep("POP 1", 20),rep("POP 2", 20)),ind.names=c(1:20,1:20),
loc0=sample(c("0101","0102","0202"),40,replace=TRUE),
loc1=sample(c("0101","0102","0202"),40,replace=TRUE))
boot.out<-as.data.frame(t(replicate(10, fst.boot(gpop))))
outliers<-find.outliers(fsts,boot.out)
gpop<-data.frame(popinfo=c(rep("POP 1", 20),rep("POP 2", 20)),ind.names=c(1:20,1:20))
for(i in 1:50){
gpop[1:20,(i+2)]<-sample(c("0101","0102","0202"),40,replace=TRUE)
}
gpop<-data.frame(popinfo=c(rep("POP 1", 20),rep("POP 2", 20)),ind.names=c(1:20,1:20))
for(i in 1:50){
gpop[1:20,(i+2)]<-sample(c("0101","0102","0202"),20,replace=TRUE)
gpop[20:40,(i+2)]<-sample(c("0101","0102","0202"),20,replace=TRUE)
}
for(i in 1:40){
gpop[1:20,(i+2)]<-sample(c("0101","0102","0202"),20,replace=TRUE)
gpop[20:40,(i+2)]<-sample(c("0101","0102","0202"),20,replace=TRUE)
}
gpop<-data.frame(popinfo=c(rep("POP 1", 20),rep("POP 2", 20)),ind.names=c(1:20,1:20))
for(i in 1:40){
gpop[1:20,(i+2)]<-sample(c("0101","0102","0202"),20,replace=TRUE)
gpop[21:40,(i+2)]<-sample(c("0101","0102","0202"),20,replace=TRUE)
}
dim(gpop)
out.dat<-fhetboot(gpop, fst.choice="fst", alpha=0.05,nreps=1
)
fsts<-calc.actual.fst(gpop)
boot.out<-as.data.frame(t(replicate(1, fst.boot(gpop))))
outliers<-find.outliers(fsts,boot.out)
library(fsthet)
gpop<-data.frame(popinfo=c(rep("POP 1", 20),rep("POP 2", 20)),ind.names=c(1:20,1:20))
for(i in 1:40){
gpop[1:20,(i+2)]<-sample(c("0101","0102","0202"),20,replace=TRUE)
gpop[21:40,(i+2)]<-sample(c("0101","0102","0202"),20,replace=TRUE)
}
out.dat<-fhetboot(gpop, fst.choice="fst", alpha=0.05,nreps=1)
fsts<-calc.actual.fst(gpop)
boot.out<-as.data.frame(t(replicate(1, fst.boot(gpop, num.breaks=20))))
boot.pvals<-p.boot(fsts,boot.out=boot.out)
bh<-calc.betahat(gpop, 3)
gpop<-data.frame(popinfo=c(rep("POP 1", 20),rep("POP 2", 20)),ind.names=c(1:20,1:20),
loc0=sample(c("0101","0102","0202"),40,replace=TRUE))
fsts<-calc.actual.fst(gpop)
load(bins)
load(bins)
fst.CI<-find.quantiles(bins$bins,bins$bin.fst)
load(bins)
bins<-make.bins(fsts)
gpop<-data.frame(popinfo=c(rep("POP 1", 20),rep("POP 2", 20)),ind.names=c(1:20,1:20))
for(i in 1:40){
gpop[1:20,(i+2)]<-sample(c("0101","0102","0202"),20,replace=TRUE)
gpop[21:40,(i+2)]<-sample(c("0101","0102","0202"),20,replace=TRUE)
}
fsts<-calc.fst(gpop)
bins<-make.bins(fsts)
fst.CI<-find.quantiles(bins$bins,bins$bin.fst)
fsts<-calc.fst(gpop,3)
bins<-make.bins(fsts)
fst.CI<-find.quantiles(bins$bins,bins$bin.fst)
fsts
gpop<-data.frame(popinfo=c(rep("POP 1", 20),rep("POP 2", 20)),ind.names=c(1:20,1:20))
for(i in 1:40){
gpop[1:20,(i+2)]<-sample(c("0101","0102","0202"),20,replace=TRUE)
gpop[21:40,(i+2)]<-sample(c("0101","0102","0202"),20,replace=TRUE)
}
fsts<-calc.actual.fst(gpop)
boot.out<-as.data.frame(t(replicate(1, fst.boot(gpop))))
outliers<-find.outliers(fsts,boot.out)
fsts<-calc.actual.fst(gpop)
quant.out<-as.data.frame(t(replicate(1, fst.boot(gpop,bootstrap=FALSE))))
gpop<-data.frame(popinfo=c(rep("POP 1", 20),rep("POP 2", 20)),ind.names=c(1:20,1:20),
loc0=sample(c("0101","0102","0202"),40,replace=TRUE),
loc1=sample(c("0101","0102","0202"),40,replace=TRUE))
fsts<-calc.actual.fst(gpop)
nloci<-(ncol(gpop)-2)
boot.out<-as.data.frame(t(replicate(nloci, fst.boot.onecol(gpop))))
make.bins(boot.out,25)
gfile<-system.file("extdata", "example.genepop.txt",package = 'fsthet')
gpop<-my.read.gpop(gfile)
gpop<-my.read.genepop(gfile)
gpop<-data.frame(popinfo=c(rep("POP 1", 20),rep("POP 2", 20)),ind.names=c(1:20,1:20),
loc0=sample(c("0101","0102","0202"),40,replace=TRUE),
loc1=sample(c("0101","0102","0202"),40,replace=TRUE))
var1<-var.fst(gpop,3)
gpop<-data.frame(popinfo=c(rep("POP 1", 20),rep("POP 2", 20)),ind.names=c(1:20,1:20),
loc0=sample(c("0101","0102","0202"),40,replace=TRUE),
loc1=sample(c("0101","0102","0202"),40,replace=TRUE))
fsts<-calc.actual.fst(gpop)
bins<-make.bins(fsts)
cis<-find.quantiles(bins = bins$bins,bin.fst = bins$bin.fst)
quant.list<-cis$CI0.95
plotting.cis(df=fsts,ci.df=quant.list,make.file=F)
gpop<-data.frame(popinfo=c(rep("POP 1", 20),rep("POP 2", 20)),ind.names=c(1:20,1:20))
for(i in 1:40){
gpop[1:20,(i+2)]<-sample(c("0101","0102","0202"),20,replace=TRUE)
gpop[21:40,(i+2)]<-sample(c("0101","0102","0202"),20,replace=TRUE)
}
fsts<-calc.actual.fst(gpop)
nloci<-(ncol(gpop)-2)
boot.out<-as.data.frame(t(replicate(nloci, fst.boot.onecol(gpop))))
make.bins(boot.out,25)
boot.out<-as.data.frame(t(replicate(nloci, fst.boot.onecol(gpop,"fst"))))
make.bins(boot.out,25)
boot.out
make.bins(boot.out,25,Ht.name="V1",Fst.name="V2")
bins<-make.bins(boot.out,25,Ht.name="V1",Fst.name="V2")
fst.CI<-find.quantiles(bins$bins,bins$bin.fst)
rm(list=ls())
dev.off()
library(fsthet)
install.packages("testthat")
library(testthat)
load(bins.rda)
gpop<-data.frame(popinfo=c(rep("POP 1", 20),rep("POP 2", 20)),ind.names=c(1:20,1:20))
for(i in 1:40){
gpop[1:20,(i+2)]<-sample(c("0101","0102","0202"),20,replace=TRUE)
gpop[21:40,(i+2)]<-sample(c("0101","0102","0202"),20,replace=TRUE)
}
fsts<-calc.actual.fst(gpop)
nloci<-(ncol(gpop)-2)
boot.out<-as.data.frame(t(replicate(nloci, fst.boot.onecol(gpop,"fst"))))
outliers<-find.outliers(fsts,boot.out)
boot.out
boot.out
library(fsthet)
S1<- c("1112","1212","1313","1114","1214","1315","1113","1212","1314","1113","1212","1315","1214","1315","1115","1215","1313","1112","1212","1315","1112","1212","1313","1114","1214","1315","1113","1212","1314","1113","1212","1315","1214","1315","1115","1215","1313","1112","1212","1315","1112","1212","1313","1114","1214","1315","1113","1212","1314","1113","1212","1315","1214","1315","1115","1215","1313","1112","1212","1315","1112","1212","1313","1114","1214","1315","1113","1212","1314","1113","1212","1315","1214","1315","1115","1215","1313","1112","1212","1315","1112","1212","1313","1114","1214","1315","1113","1212","1314","1113","1212","1315","1214","1315","1115","1215","1313","1112","1212","1315","1112","1212","1313","1114","1214","1315","1113","1212","1314","1113","1212","1315","1214","1315","1115","1215","1313","1112","1212","1315")
S2<- c("1113","1213","1314","1115","1215","1314","1111","1212","1313","1114","1215","1315","1213","1314","1113","1212","1314","1111","1212","1315","1113","1213","1314","1115","1215","1314","1111","1212","1313","1114","1215","1315","1213","1314","1113","1212","1314","1111","1212","1315","1113","1213","1314","1115","1215","1314","1111","1212","1313","1114","1215","1315","1213","1314","1113","1212","1314","1111","1212","1315","1113","1213","1314","1115","1215","1314","1111","1212","1313","1114","1215","1315","1213","1314","1113","1212","1314","1111","1212","1315","1113","1213","1314","1115","1215","1314","1111","1212","1313","1114","1215","1315","1213","1314","1113","1212","1314","1111","1212","1315","1113","1213","1314","1115","1215","1314","1111","1212","1313","1114","1215","1315","1213","1314","1113","1212","1314","1111","1212","1315")
gpop<-data.frame(popinfo=c(rep("POP 1", 120),rep("POP 2", 120)),ind.names=c(1:120,1:120))
for(i in 1:40){
gpop[1:120,(i+2)]<-sample((S1),20,replace=FALSE)
gpop[121:240,(i+2)]<-sample((S2),20,replace=FALSE)
}
fsts1<-calc.actual.fst(gpop)
cis1<-fst.boot(gpop, bootstrap = FALSE,min.per.bin = 5)
for(i in 1:40){
gpop[1:120,(i+2)]<-sample((S1),30,replace=FALSE)
gpop[121:240,(i+2)]<-sample((S2),30,replace=FALSE)
}
fsts2<-calc.actual.fst(gpop)
cis2<-fst.boot(gpop, bootstrap = FALSE,min.per.bin = 5)
for(i in 1:40){
gpop[1:120,(i+2)]<-sample((S1),40,replace=FALSE)
gpop[121:240,(i+2)]<-sample((S2),40,replace=FALSE)
}
fsts3<-calc.actual.fst(gpop)
cis3<-fst.boot(gpop, bootstrap = FALSE,min.per.bin = 5)
for(i in 1:40){
gpop[1:120,(i+2)]<-sample((S1),60,replace=FALSE)
gpop[121:240,(i+2)]<-sample((S2),60,replace=FALSE)
}
fsts4<-calc.actual.fst(gpop)
cis4<-fst.boot(gpop, bootstrap = FALSE,min.per.bin = 5)
fsts <- list(fsts1$Fst, fsts2$Fst, fsts3$Fst, fsts4$Fst)
uppcis<- list(cis1[[3]][[1]]$Upp,cis2[[3]][[1]]$Upp,cis3[[3]][[1]]$Upp,cis4[[3]][[1]]$Upp)
lowcis<- list(cis1[[3]][[1]]$Low,cis2[[3]][[1]]$Low,cis3[[3]][[1]]$Upp,cis4[[3]][[1]]$Low)
boxplot(fsts, freq = F, main="The impact of sample size on Fst", xlab ="Sample size", ylab ="Theta values", las=1, ylim=c(0,0.06), names=c(20,30,40,60))
boxplot(uppcis, freq = F, main="The impact of sample size on CI", xlab ="Sample size", ylab ="Upper CI for the theta values", las=1, ylim=c(0,0.08), names=c(20,30,40,60))
boxplot(lowcis, freq = F, main="The impact of sample size on CI", xlab ="Sample size", ylab ="Lower CI for the theta values", las=1, ylim=c(0,0.06), names=c(20,30,40,60))
boxplot(fsts, freq = F, main="The impact of sample size on Fst", xlab ="Sample size", ylab ="Theta values", las=1, ylim=c(0,0.06), names=c(20,30,40,60))
boxplot(uppcis, freq = F, main="The impact of sample size on CI", xlab ="Sample size", ylab ="Upper CI for the theta values", las=1, ylim=c(0,0.08), names=c(20,30,40,60))
boxplot(lowcis, freq = F, main="The impact of sample size on CI", xlab ="Sample size", ylab ="Lower CI for the theta values", las=1, ylim=c(0,0.06), names=c(20,30,40,60))
par(mfrow=c(2,2),oma=c(2,2,2,2),mar=c(2,2,2,2))
plotting.cis(fsts1,cis1,make.file=FALSE)
plotting.cis(fsts2,cis2,make.file=FALSE)
plotting.cis(fsts3,cis3,make.file=FALSE)
plotting.cis(fsts4,cis4,make.file=FALSE)
sqrt(var(fsts1$Fst))
sem<-function(x){
sem<-sd(x)/sqrt(length(x))
return(sem)
}
df2 <- list(sem(fsts1$Fst), sem(fsts2$Fst), sem(fsts3$Fst),sem(fsts4$Fst))
boxplot(df2, freq=F, main="The impact of sample size on Standard error", xlab ="Sample size", ylab ="Standard error for the theta values", las=1, names=c(20,30,40,60))
par()
